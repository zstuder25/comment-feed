{"version":3,"sources":["assets/profilePicture.jpg","assets/location.svg","assets/heart.svg","assets/edit.svg","assets/delete.svg","assets/hoverDot.svg","assets/heartGray.svg","assets/comment.svg","assets/ellipsis.svg","IconImage/IconImage.js","PostingFeed/Post/PostMetaInfo/PostMedaInfo.js","PostingFeed/Post/CommentList/Comment/Comment.js","PostingFeed/Post/CommentList/Comment/CommentContainer.js","PostingFeed/Post/CommentList/CommentList.js","PostingFeed/Post/AddCommentInput/AddCommentInput.js","PostingFeed/Post/Post.js","selectors/postSelectors.js","PostingFeed/Post/PostContainer.js","PostingFeed/PostingFeed.js","PostingFeed/PostingFeedContainer.js","PhotoVidButton/PhotoVidButton.js","PostingBox/PostingBox.js","PostingBox/PostingBoxContainer.js","App.js","serviceWorker.js","reducers/postReducer.js","store.js","index.js"],"names":["module","exports","imageIcon","Image","className","src","ProfilePic","roundedCircle","postMetaInfo","props","Card","Text","href","target","LocationIcon","moment","time","fromNow","comment","useState","editComment","setEditComment","commentText","editCommentText","setEditCommentText","Title","style","color","commentDateTime","Form","Control","defaultValue","type","onInput","e","keyCode","value","onKeyDown","ButtonGroup","Button","variant","disabled","likes","onClick","likeComment","Like","Edit","deleteComment","Delete","connect","dispatch","postIndex","commentIndex","Comment","commentList","comments","map","index","CommentContainer","addCommentInput","setCommentText","placeholder","addComment","post","setAddComment","postDateTime","Ellipsis","Body","postText","HoverDot","length","Footer","likePost","CommentList","getPosts","state","posts","slice","sort","a","b","Post","postingFeed","allPosts","PostContainer","PostingFeed","display","float","borderRadius","photoVidButton","postingBox","setPostText","Group","as","rows","PhotoVidButton","submitPost","PostingBox","App","PostingBoxContainer","PostingFeedContainer","Component","Boolean","window","location","hostname","match","initialState","Date","getTime","createReducer","action","push","splice","store","createStore","postReducer","composeWithDevTools","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9ce4f34b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profilePicture.00b475ef.jpg\";","module.exports = __webpack_public_path__ + \"static/media/location.2590c4f7.svg\";","module.exports = __webpack_public_path__ + \"static/media/heart.6f63e093.svg\";","module.exports = __webpack_public_path__ + \"static/media/edit.4a5a13c5.svg\";","module.exports = __webpack_public_path__ + \"static/media/delete.a340eabf.svg\";","module.exports = __webpack_public_path__ + \"static/media/hoverDot.ccbdd814.svg\";","module.exports = __webpack_public_path__ + \"static/media/heartGray.8b9e4892.svg\";","module.exports = __webpack_public_path__ + \"static/media/comment.7876e7b0.svg\";","module.exports = __webpack_public_path__ + \"static/media/ellipsis.ba0cc007.svg\";","import React from \"react\";\nimport ProfilePic from '../assets/profilePicture.jpg'\nimport {Image} from \"react-bootstrap\";\nimport './IconImage.css'\n\nconst imageIcon = () => {\n  return (\n    <Image className='profileImage' src={ProfilePic} roundedCircle/>\n  )\n};\n\nexport default imageIcon;","import React from \"react\";\nimport {Card, Image} from \"react-bootstrap\";\nimport LocationIcon from \"../../../assets/location.svg\";\nimport moment from \"moment\";\n\nconst postMetaInfo = (props) => {\n  return (\n    <div className='textBox'>\n      <Card.Text>Zach Studer</Card.Text>\n      <Card.Text className='location'>\n        <a href='https://goo.gl/maps/YnwfjgH64jth4rhc7' target='blank'>\n          <Image src={LocationIcon}/>\n          OH, USA\n        </a>\n      </Card.Text>\n      <Card.Text className='relativeTime'>{moment(props.time).fromNow()}</Card.Text>\n    </div>\n  )\n};\n\nexport default postMetaInfo;","import React, {useState} from \"react\";\nimport {Button, ButtonGroup, Card, Form, Image} from \"react-bootstrap\";\nimport moment from \"moment\";\nimport './Comment.css'\nimport Like from './../../../../assets/heart.svg'\nimport Edit from './../../../../assets/edit.svg'\nimport Delete from './../../../../assets/delete.svg'\n\nconst comment = (props) => {\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const [editComment, setEditComment] = useState(false);\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const [editCommentText, setEditCommentText] = useState(props.comment.commentText);\n\n  return (\n    <Card className='commentCard'>\n      <Card.Title className='innerCard'>\n        <div className='metaInfo'>\n          <Card.Text>Zach Studer</Card.Text>\n          <Card.Text style={{color: 'blue'}}>Software Developer</Card.Text>\n        </div>\n        <Card.Text className='timeStamp'>{moment(props.comment.commentDateTime).fromNow()}</Card.Text>\n      </Card.Title>\n      {\n        <Card.Text className='innerCard commentText'>\n          {!editComment ? props.comment.commentText :\n            <Form.Control defaultValue={props.comment.commentText} type='text' className='editBox'\n              onInput={e => {\n                if(e.keyCode !== 13) {\n                  setEditCommentText(e.target.value)\n                }\n              }}\n              onKeyDown={ e => {\n                if(e.keyCode === 13){\n                  props.editComment(editCommentText);\n                  setEditComment(false)\n                }\n              }}\n            />\n          }\n        </Card.Text>\n      }\n      <ButtonGroup className='commentOptions'>\n        <Button variant='outline-secondary' disabled >\n          {props.comment.likes}\n          <span className='text'> Likes</span>\n        </Button>\n        <span className='text'>|</span>\n        <Button variant='outline-secondary' onClick={props.likeComment} >\n          <Image src={Like}/>\n          <span className='text'> Like</span>\n        </Button>\n        <span className='text'>|</span>\n        <Button variant='outline-secondary' onClick={() => setEditComment(!editComment)} >\n          <Image src={Edit}/>\n          <span className='text'> Edit</span>\n        </Button>\n        <span className='text'>|</span>\n        <Button variant='outline-secondary' onClick={props.deleteComment} >\n          <Image src={Delete}/>\n          <span className='text'> Delete</span>\n        </Button>\n      </ButtonGroup>\n    </Card>\n  )\n};\n\nexport default comment;","import {connect} from \"react-redux\";\nimport Comment from \"./Comment\";\n\n  const mapDispatchToProps = (dispatch, props) => ({\n    likeComment: () => {\n      dispatch({ type: \"LIKE_COMMENT\",  postIndex: props.postIndex, commentIndex: props.commentIndex })\n    },\n    editComment: (commentText) => {\n      dispatch({ type: \"EDIT_COMMENT\",  postIndex: props.postIndex, commentIndex: props.commentIndex, commentText: commentText })\n    },\n    deleteComment: () => {\n      dispatch({ type: \"DELETE_COMMENT\",  postIndex: props.postIndex, commentIndex: props.commentIndex })\n    },\n});\n\nexport default connect(null, mapDispatchToProps)(Comment);","import React from \"react\";\nimport IconImage from './../../../IconImage/IconImage'\nimport CommentContainer from \"./Comment/CommentContainer\";\n\nconst commentList = (props) => {\n  const comments = props.comments.map( (comment, index) =>\n    <div>\n      <IconImage/>\n      <CommentContainer postIndex={props.postIndex} comment={comment} commentIndex={index}/>\n    </div>\n  );\n\n  return (\n    <>\n      {comments}\n    </>\n  )\n};\n\n\nexport default commentList;","import React, {useState} from \"react\";\nimport {Form} from \"react-bootstrap\";\nimport IconImage from './../../../IconImage/IconImage'\nimport './AddCommentInput.css'\n\nconst addCommentInput = (props) => {\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const [commentText, setCommentText] = useState('');\n\n  return (\n    <div >\n      <IconImage/>\n      <Form.Control className='addCommentBox' type='text' placeholder='Add a Comment'\n        value={commentText}\n        onInput={e => {\n          if(e.keyCode !== 13) {\n            setCommentText(e.target.value)\n          }\n        }}\n        onKeyDown={ e => {\n          if(e.keyCode === 13){\n            props.addComment(commentText)\n            setCommentText('');\n          }\n        }}\n      />\n    </div>\n  )\n};\n\nexport default addCommentInput;","import React, {useState} from \"react\";\nimport {Button, ButtonGroup, Card, Image} from \"react-bootstrap\";\nimport IconImage from './../../IconImage/IconImage'\nimport PostMetaInfo from './PostMetaInfo/PostMedaInfo'\nimport CommentList from './CommentList/CommentList'\nimport AddCommentInput from './AddCommentInput/AddCommentInput'\nimport './Post.css'\nimport HoverDot from '../../assets/hoverDot.svg'\nimport Like from '../../assets/heartGray.svg'\nimport Comment from '../../assets/comment.svg'\nimport Ellipsis from '../../assets/ellipsis.svg'\n\nconst post = (props) => {\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const [addComment, setAddComment] = useState(false);\n\n  return (\n    <Card className='post'>\n      <Card.Title>\n        <IconImage  />\n        <PostMetaInfo time={props.post.postDateTime} />\n        <Image src={Ellipsis} className='ellipsis'/>\n      </Card.Title>\n      <Card.Body>\n        {props.post.postText}\n        <Card.Text className='likesComments'>\n          <span>{props.post.likes} Likes</span>\n          <Image src={HoverDot} />\n          <span>{props.post.comments.length} Comments</span>\n        </Card.Text>\n      </Card.Body>\n      <Card.Footer >\n        <ButtonGroup className='likesCommentsButtons'>\n          <Button variant='outline-secondary' onClick={() => props.likePost(props.postIndex)}>\n            <Image src={Like} />\n            Like\n          </Button>\n          <Button variant='outline-secondary' onClick={() => setAddComment(!addComment)}>\n            <Image src={Comment} />\n            Comment\n          </Button>\n        </ButtonGroup>\n        {addComment && <AddCommentInput addComment={props.addComment} />}\n        {props.post.comments.length > 0  && <CommentList comments={props.post.comments} postIndex={props.postIndex}/> }\n      </Card.Footer>\n    </Card>\n  )\n};\n\nexport default post;","export const getPosts = state => state.posts.slice().sort((a, b) => b.postDateTime - a.postDateTime);","import {connect} from \"react-redux\";\nimport Post from './Post'\nimport {getPosts} from \"../../selectors/postSelectors\";\n\nconst mapStateToProps = (state, props) => ({\n  post: getPosts(state)[props.postIndex]\n});\n\nconst mapDispatchToProps = (dispatch, props) => ({\n  likePost: () => {\n    dispatch({ type: \"LIKE_POST\", postIndex: props.postIndex })\n  },\n  addComment: (commentText) => {\n    dispatch({ type: \"ADD_COMMENT\",  postIndex: props.postIndex, comment: commentText })\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Post);","import React from \"react\";\nimport PostContainer from \"./Post/PostContainer\";\n\nconst postingFeed = (props) => {\n  const posts = props.allPosts.map( (post, index) =>\n    <PostContainer postIndex={index} />\n  );\n\n  return (\n    <div>\n      {posts}\n    </div>\n  )\n};\n\nexport default postingFeed;","import { connect } from \"react-redux\";\nimport PostingFeed from \"./PostingFeed\";\nimport { getPosts } from \"../selectors/postSelectors\";\n\nconst mapStateToProps = state => ({\n  allPosts: getPosts(state),\n});\n\nexport default connect(mapStateToProps)(PostingFeed);\n","import React from \"react\";\nimport {Button} from \"react-bootstrap\";\n\nconst photoVidButton = () => {\n  return (\n    <Button variant='dark' style={style} >\n      Photo/Video\n    </Button>\n  )\n};\n\nconst style = {\n  display: 'inline-block',\n  float: 'left',\n  borderRadius: '3vh'\n};\n\nexport default photoVidButton;","import React, {useState} from \"react\";\nimport IconImage from './../IconImage/IconImage';\nimport PhotoVidButton from './../PhotoVidButton/PhotoVidButton';\nimport {Button, Card, Form} from \"react-bootstrap\";\nimport './PostingBox.css'\n\nconst postingBox = (props) => {\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const [postText, setPostText] = useState('');\n\n  return(\n    <Card className='cardStyle'>\n      <Card.Body >\n        <Form>\n          <Form.Group>\n            <IconImage />\n            <Form.Control\n              as='textarea' rows='3' placeholder={'What is on your mind?'} className='inputStyle'\n              value={postText} onInput={e => setPostText(e.target.value)}\n            />\n          </Form.Group>\n          <PhotoVidButton />\n          <Button\n            variant='primary' className='postItButtonStyle' disabled={postText === ''}\n            onClick={() => {\n              props.submitPost(postText);\n              setPostText('');\n            }}\n          >\n            Post It\n          </Button>\n        </Form>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default postingBox;","import {connect} from \"react-redux\";\nimport PostingBox from './PostingBox'\n\nconst mapDispatchToProps = dispatch => ({\n  submitPost: postText => {\n    dispatch({ type: \"MAKE_POST\", post: postText })\n  },\n});\n\nexport default connect(null, mapDispatchToProps)(PostingBox);\n","import React, {Component} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport PostingFeedContainer from \"./PostingFeed/PostingFeedContainer\";\nimport PostingBoxContainer from \"./PostingBox/PostingBoxContainer\";\nimport './App.css'\n\n\nclass App extends Component {\n\n  render () {\n    return (\n      <div>\n        <PostingBoxContainer />\n        <PostingFeedContainer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Garbage data to make graph appear\n\nimport {createReducer} from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  posts: [\n    {\n      postText: 'First!',\n      postDateTime: new Date(new Date().getTime() - (5*60000)), // Five minutes ago\n      likes: 1,\n      comments: [\n        {\n          commentText: 'woah, so cool',\n          likes: 1,\n          commentDateTime: new Date(new Date().getTime() - (3*60000)) // Three minutes ago\n        },\n        {\n          commentText: 'this is the next comment',\n          likes: 0,\n          commentDateTime: new Date()\n        }\n      ]\n    },\n    {\n      postText: 'Second is best!',\n      postDateTime: new Date(),\n      likes: 2,\n      comments: []\n    }\n  ],\n};\n\nconst createPost = (postText) => {\n  return {\n    postText: postText,\n    postDateTime: new Date(),\n    likes: 0,\n    comments: []\n  }\n};\n\n\nconst createComment = (commentText) => {\n  return {\n    commentText: commentText,\n    likes: 0,\n    commentDateTime: new Date()\n  }\n};\n\n\nexport default createReducer(initialState, {\n  ['MAKE_POST']: (state, action) => {\n    state.posts.push(createPost(action.post))\n  },\n  ['LIKE_POST']: (state, action) => {\n    state.posts.sort((a, b) => b.postDateTime - a.postDateTime);\n    state.posts[action.postIndex].likes ++\n  },\n  ['LIKE_COMMENT']: (state, action) => {\n    state.posts.sort((a, b) => b.postDateTime - a.postDateTime);\n    state.posts[action.postIndex].comments[action.commentIndex].likes ++\n  },\n  ['ADD_COMMENT']: (state, action) => {\n    state.posts.sort((a, b) => b.postDateTime - a.postDateTime);\n    state.posts[action.postIndex].comments.push(createComment(action.comment))\n  },\n  ['EDIT_COMMENT']: (state, action) => {\n    state.posts.sort((a, b) => b.postDateTime - a.postDateTime);\n    state.posts[action.postIndex].comments[action.commentIndex].commentText = action.commentText\n  },\n  ['DELETE_COMMENT']: (state, action) => {\n    state.posts.sort((a, b) => b.postDateTime - a.postDateTime);\n    const index = action.commentIndex;\n    state.posts[action.postIndex].comments.splice(index, index+1)\n  }\n})\n","import {createStore} from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport postReducer from \"./reducers/postReducer\";\n\nconst store = createStore(postReducer, composeWithDevTools());\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}