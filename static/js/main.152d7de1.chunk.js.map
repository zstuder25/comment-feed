{"version":3,"sources":["assets/profilePicture.jpg","assets/location.svg","assets/heart.svg","assets/edit.svg","assets/delete.svg","assets/hoverDot.svg","assets/heartGray.svg","assets/comment.svg","assets/ellipsis.svg","IconImage/IconImage.js","PostingFeed/Post/PostMetaInfo/PostMedaInfo.js","PostingFeed/Post/CommentList/Comment/Comment.js","PostingFeed/Post/CommentList/CommentList.js","PostingFeed/Post/Post.js","selectors/postSelectors.js","PostingFeed/Post/PostContainer.js","PostingFeed/PostingFeed.js","PostingFeed/PostingFeedContainer.js","PhotoVidButton/PhotoVidButton.js","PostingBox/PostingBox.js","PostingBox/PostingBoxContainer.js","App.js","serviceWorker.js","reducers/postReducer.js","store.js","index.js"],"names":["module","exports","style","border","maxWidth","maxHeight","margin","float","imageIcon","Image","src","ProfilePic","roundedCircle","postMetaInfo","props","className","Card","Text","LocationIcon","moment","time","fromNow","comment","Title","color","commentDateTime","commentText","ButtonGroup","Button","variant","disabled","likes","Like","Edit","Delete","commentList","comments","map","IconImage","post","postDateTime","Ellipsis","Body","postText","HoverDot","length","Footer","onClick","likePost","postIndex","Comment","CommentList","getPosts","state","posts","sort","a","b","connect","dispatch","type","Post","postingFeed","allPosts","index","PostContainer","PostingFeed","display","borderRadius","photoVidButton","cardStyle","width","inputStyle","borderBottom","resize","postItButtonStyle","postingBox","useState","setPostText","Form","Group","Control","as","rows","placeholder","value","onInput","e","target","PhotoVidButton","submitPost","PostingBox","App","PostingBoxContainer","PostingFeedContainer","Component","Boolean","window","location","hostname","match","initialState","Date","getTime","createPost","incrementLikes","store","createStore","action","concat","composeWithDevTools","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.152d7de1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profilePicture.00b475ef.jpg\";","module.exports = __webpack_public_path__ + \"static/media/location.2590c4f7.svg\";","module.exports = __webpack_public_path__ + \"static/media/heart.6f63e093.svg\";","module.exports = __webpack_public_path__ + \"static/media/edit.4a5a13c5.svg\";","module.exports = __webpack_public_path__ + \"static/media/delete.a340eabf.svg\";","module.exports = __webpack_public_path__ + \"static/media/hoverDot.ccbdd814.svg\";","module.exports = __webpack_public_path__ + \"static/media/heartGray.8b9e4892.svg\";","module.exports = __webpack_public_path__ + \"static/media/comment.7876e7b0.svg\";","module.exports = __webpack_public_path__ + \"static/media/ellipsis.ba0cc007.svg\";","import React from \"react\";\nimport ProfilePic from '../assets/profilePicture.jpg'\nimport {Image} from \"react-bootstrap\";\n\nconst imageIcon = () => {\n  return (\n    <Image src={ProfilePic} style={style} roundedCircle/>\n  )\n};\n\nconst style = {\n  border: '1px solid #ddd',\n  maxWidth: '7%',\n  maxHeight: '7%',\n  margin: '2%',\n  float: 'left'\n};\n\nexport default imageIcon;","import React from \"react\";\nimport {Card, Image} from \"react-bootstrap\";\nimport LocationIcon from \"../../../assets/location.svg\";\nimport moment from \"moment\";\n\nconst postMetaInfo = (props) => {\n  return (\n    <div className='textBox'>\n      <Card.Text>Zach Studer</Card.Text>\n      <Card.Text className='location'>\n        <Image src={LocationIcon}/>\n        OH, USA\n      </Card.Text>\n      <Card.Text className='relativeTime'>{moment(props.time).fromNow()}</Card.Text>\n    </div>\n  )\n};\n\nexport default postMetaInfo;","import React from \"react\";\nimport {Button, ButtonGroup, Card, Image} from \"react-bootstrap\";\nimport moment from \"moment\";\nimport './Comment.css'\nimport Like from './../../../../assets/heart.svg'\nimport Edit from './../../../../assets/edit.svg'\nimport Delete from './../../../../assets/delete.svg'\n\nconst comment = (props) => {\n  return (\n    <Card className='commentCard'>\n      <Card.Title className='innerCard'>\n        <div className='metaInfo'>\n          <Card.Text>Zach Studer</Card.Text>\n          <Card.Text style={{color: 'blue'}}>Software Developer</Card.Text>\n        </div>\n        <Card.Text className='timeStamp'>{moment(props.comment.commentDateTime).fromNow()}</Card.Text>\n      </Card.Title>\n      <Card.Text className='innerCard commentText'>{props.comment.commentText}</Card.Text>\n      <ButtonGroup className='commentOptions'>\n        <Button variant='outline-secondary' disabled >{props.comment.likes} Likes</Button> |\n        <Button variant='outline-secondary' ><Image src={Like}/> Like</Button> |\n        <Button variant='outline-secondary' ><Image src={Edit}/> Edit</Button> |\n        <Button variant='outline-secondary' ><Image src={Delete}/> Delete</Button>\n      </ButtonGroup>\n    </Card>\n  )\n};\n\nexport default comment;","import React from \"react\";\nimport Comment from './Comment/Comment'\nimport IconImage from './../../../IconImage/IconImage'\n\nconst commentList = (props) => {\n  const comments = props.comments.map( (comment) =>\n    <div>\n      <IconImage/>\n      <Comment comment={comment} />\n    </div>\n  );\n\n  return (\n    <>\n      {comments}\n    </>\n  )\n};\n\n\nexport default commentList;","import React from \"react\";\nimport {Button, ButtonGroup, Card, Image} from \"react-bootstrap\";\nimport IconImage from './../../IconImage/IconImage'\nimport PostMetaInfo from './PostMetaInfo/PostMedaInfo'\nimport CommentList from './CommentList/CommentList'\nimport './Post.css'\nimport HoverDot from '../../assets/hoverDot.svg'\nimport Like from '../../assets/heartGray.svg'\nimport Comment from '../../assets/comment.svg'\nimport Ellipsis from '../../assets/ellipsis.svg'\n\nconst post = (props) => {\n  return (\n    <Card className='post'>\n      <Card.Title>\n        <IconImage  />\n        <PostMetaInfo time={props.post.postDateTime} />\n        <Image src={Ellipsis} className='ellipsis'/>\n      </Card.Title>\n      <Card.Body>\n        {props.post.postText}\n        <Card.Text className='likesComments'>\n          <span>{props.post.likes} Likes</span>\n          <Image src={HoverDot} />\n          <span>{props.post.comments.length} Comments</span>\n        </Card.Text>\n      </Card.Body>\n      <Card.Footer >\n        <ButtonGroup className='likesCommentsButtons'>\n          <Button variant='outline-secondary' onClick={() => props.likePost(props.postIndex)}>\n            <Image src={Like} className='likeIcon' />\n            Like\n          </Button>\n          <Button variant='outline-secondary'>\n            <Image src={Comment} className='commentIcon' />\n            Comment\n          </Button>\n        </ButtonGroup>\n        {props.post.comments.length > 0  && <CommentList comments={props.post.comments}/> }\n      </Card.Footer>\n    </Card>\n  )\n};\n\nexport default post;","export const getPosts = state => state.posts.sort((a, b) => b.postDateTime - a.postDateTime);;","import {connect} from \"react-redux\";\nimport Post from './Post'\nimport {getPosts} from \"../../selectors/postSelectors\";\n\nconst mapStateToProps = (state, props) => ({\n  post: getPosts(state)[props.postIndex]\n});\n\nconst mapDispatchToProps = dispatch => ({\n  likePost: postIndex => {\n    dispatch({ type: \"LIKE_POST\", postIndex: postIndex })\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Post);","import React from \"react\";\nimport PostContainer from \"./Post/PostContainer\";\n\nconst postingFeed = (props) => {\n  const posts = props.allPosts.map( (post, index) =>\n    <PostContainer postIndex={index} />\n  );\n\n  return (\n    <div>\n      {posts}\n    </div>\n  )\n};\n\nexport default postingFeed;","import { connect } from \"react-redux\";\nimport PostingFeed from \"./PostingFeed\";\nimport { getPosts } from \"../selectors/postSelectors\";\n\nconst mapStateToProps = state => ({\n  allPosts: getPosts(state),\n});\n\nexport default connect(mapStateToProps)(PostingFeed);\n","import React from \"react\";\nimport {Button} from \"react-bootstrap\";\n\nconst photoVidButton = () => {\n  return (\n    <Button variant='dark' style={style} >\n      Photo/Video\n    </Button>\n  )\n};\n\nconst style = {\n  display: 'inline-block',\n  float: 'left',\n  borderRadius: '3vh'\n};\n\nexport default photoVidButton;","import React, {useState} from \"react\";\nimport IconImage from './../IconImage/IconImage';\nimport PhotoVidButton from './../PhotoVidButton/PhotoVidButton';\nimport {Button, Card, Form} from \"react-bootstrap\";\n\nconst postingBox = (props) => {\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const [postText, setPostText] = useState('');\n\n  return(\n    <Card style={cardStyle}>\n      <Card.Body >\n        <Form>\n          <Form.Group>\n            <IconImage />\n            <Form.Control\n              as='textarea' rows='3' placeholder={'What is on your mind?'} style={inputStyle}\n              value={postText} onInput={e => setPostText(e.target.value)}\n            />\n          </Form.Group>\n          <PhotoVidButton />\n          <Button\n            variant='primary' style={postItButtonStyle} disabled={postText === ''}\n            onClick={() => {\n              props.submitPost(postText);\n              setPostText('');\n            }}\n          >\n            Post It\n          </Button>\n        </Form>\n      </Card.Body>\n    </Card>\n  );\n};\n\nconst cardStyle = {\n  width: \"50%\",\n  margin: \"2% 25%\",\n  borderRadius: '5vh'\n};\n\nconst inputStyle = {\n  border: 'none',\n  borderBottom: '1px solid #ced4da',\n  display: 'inline',\n  width: '75%',\n  resize: 'none'\n};\n\nconst postItButtonStyle = {\n  display: 'inline block',\n  float: 'right'\n};\n\nexport default postingBox;","import {connect} from \"react-redux\";\nimport PostingBox from './PostingBox'\n\nconst mapDispatchToProps = dispatch => ({\n  submitPost: postText => {\n    dispatch({ type: \"MAKE_POST\", post: postText })\n  },\n});\n\nexport default connect(null, mapDispatchToProps)(PostingBox);\n","import React, {Component} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport PostingFeedContainer from \"./PostingFeed/PostingFeedContainer\";\nimport PostingBoxContainer from \"./PostingBox/PostingBoxContainer\";\nimport './App.css'\n\n\nclass App extends Component {\n\n  render () {\n    return (\n      <div>\n        <PostingBoxContainer />\n        <PostingFeedContainer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Garbage data to make graph appear\n\nconst initialState = {\n  posts: [\n    {\n      postText: 'First!',\n      postDateTime: new Date(new Date().getTime() - (5*60000)), // Five minutes ago\n      likes: 1,\n      comments: [\n        {\n          commentText: 'woah, so cool',\n          likes: 1,\n          commentDateTime: new Date(new Date().getTime() - (3*60000)) // Three minutes ago\n        },\n        {\n          commentText: 'this is the next comment',\n          likes: 0,\n          commentDateTime: new Date()\n        }\n      ]\n    },\n    {\n      postText: 'Second is best!',\n      postDateTime: new Date(),\n      likes: 2,\n      comments: []\n    }\n  ],\n};\n\nconst createPost = (postText) => {\n  return {\n    postText: postText,\n    postDateTime: new Date(),\n    likes: 0,\n    comments: []\n  }\n};\n\nconst incrementLikes = (state, postIndex) => {\n  return state.posts.map((post, index) => {\n    if (index !== postIndex) {\n      return post\n    }\n    return {\n      ...post,\n      likes: post.likes + 1\n    }\n  });\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case 'MAKE_POST':\n      return {...state, posts: state.posts.concat([createPost(action.post)])};\n    case 'LIKE_POST':\n      return {...state, posts: incrementLikes(state, action.postIndex)};\n    case 'ADD_COMMENT' :\n      //TODO for adding comments\n      return state;\n    case 'ADD_LIKE_TO_COMMENT':\n      //TODO\n      return state;\n    default:\n      return state;\n  }\n}\n","import {createStore} from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport postReducer from \"./reducers/postReducer\";\n\nconst store = createStore(postReducer, composeWithDevTools());\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}